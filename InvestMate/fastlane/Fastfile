# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  # ===============================
  # 베타 배포: TestFlight 업로드만
  # ===============================
  desc "배포: TestFlight 전용 (Beta)"
  lane :beta do
    prepare_build

    upload_to_testflight(
      api_key_path: "fastlane/asc_api_key.json",
      skip_waiting_for_build_processing: true
    )

    send_discord(message: "🚀 베타 배포 성공! TestFlight 업로드 완료")
  rescue => error
    send_discord(message: "❌ 베타 배포 실패: #{error.message}")
    raise error
  end

  # ===============================
  # 릴리즈 배포: TestFlight + App Store
  # ===============================
  desc "배포: TestFlight + App Store (Release)"
  lane :release do
    prepare_build

    upload_to_app_store(
      api_key_path: "fastlane/asc_api_key.json",
      submit_for_review: false,
      skip_metadata: false,
      skip_screenshots: true,
      precheck_include_in_app_purchases: false,
      copyright: "© #{Time.now.year} KAI.",
      automatic_release: true,
      release_notes: {
  	"en-US" => "Bug fixes and stability improvements",
	 "ko" => "버그 수정 및 안정성 개선"
      },
      submission_information: {    
         export_compliance_encryption_updated: false,
         export_compliance_uses_encryption: false,
         add_id_info_uses_idfa: false
      },
      force: true
    )

    send_discord(message: "✅ 릴리즈 배포 성공! TestFlight + App Store 업로드 완료")
  rescue => error
    send_discord(message: "❌ 릴리즈 배포 실패: #{error.message}")
    raise error
  end

  # ===============================
  # 공통 작업: match, 빌드번호 증가, 빌드
  # ===============================
  private_lane :prepare_build do
    setup_ci

    match(
      type: "appstore",
      readonly: true,
      api_key_path: "fastlane/asc_api_key.json"
    )

    increment_build_number(
      xcodeproj: "Projects/InvestMate/InvestMate.xcodeproj"
    )

    build_app(
      workspace: "InvestMateWorkspace.xcworkspace",
      scheme: "InvestMate",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          "io.hogeunjo.InvestMate" => "match AppStore io.hogeunjo.InvestMate"
        }
      }
    )
  end

  # ===============================
  # Discord Webhook 알림
  # ===============================
  private_lane :send_discord do |options|
  require 'date'

  message      = options[:message]
  webhook_url  = ENV['DISCORD_WEBHOOK_URL']

  # 빌드 정보 수집
  version      = get_version_number(xcodeproj: "Projects/InvestMate/InvestMate.xcodeproj")
  build_number = get_build_number(xcodeproj: "Projects/InvestMate/InvestMate.xcodeproj")
  scheme       = "InvestMate"
  target       = "io.hogeunjo.InvestMate"
  git_hash     = sh("git rev-parse --short HEAD").strip
  branch       = sh("git rev-parse --abbrev-ref HEAD").strip
  timestamp    = DateTime.now.strftime("%Y-%m-%d %H:%M:%S")

  # 디스코드 메시지 포맷
  payload = {
    content: message,
    embeds: [
      {
        title: "📦 배포 정보",
        fields: [
          { name: "Version", value: "#{version} (#{build_number})", inline: true },
          { name: "Target", value: target, inline: true },
          { name: "Scheme", value: scheme, inline: true },
          { name: "Branch", value: branch, inline: true },
          { name: "Git Commit", value: git_hash, inline: true },
          { name: "Time", value: timestamp, inline: false }
        ]
      }
    ]
  }

  # JSON 문자열로 변환
  require 'json'
  json_payload = payload.to_json

  sh %Q(curl -H "Content-Type: application/json" -X POST -d '#{json_payload}' #{webhook_url})
  end
end